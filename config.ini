[common]
filename = data/%%(name)s.mat

[classification]
enabled = 1
dataset = digits4000
challengeset = cdigits
# preprocessing_chain = ["squaring", "deskewing", "blurring", "flattening", "normalizing", "pca"]
preprocessing_chain_after_squaring = ["deskewing", "blurring"] 
preprocessing_chain_after_flattening = ["normalizing", "pca"]
preprocessing_options = {"img_shape": [28, 28], "blur_sigma": 1}
hyperparameters = {}
best_parameters = {}
gridsearch_param = {"refit": 1, "n_jobs": -1, "cv": 3}
pca_components = 0.9
preprocessing_combination_min = -1

# The required baseline: 1-NN
[profile_baseline]
model_class = KNN
best_parameters = {"n_neighbors": 1}

[profile_SVM]
model_class = SVM
# Supress warning: use either gamma value in ["auto", "scale"]
# gamma = auto
gamma = 0.001
# param_grid = {"kernel": ["poly", "rbf", "sigmoid"], "C": [0.1, 1, 10, 100], "gamma": [1, 0.1, 0.01, 0.001]}
param_grid = {"kernel": ["poly", "rbf"], "C": [0.1, 1, 10, 100], "gamma": [1, 0.1, 0.01, 0.001]}
# , "C": [1, 10, 100, 1000]}
# best_parameters = {"C": 1, "kernel": "rbf"}
best_parameters = {"kernel": "rbf", "C": 10}

[profile_KNN]
model_class = KNN
param_grid = {"n_neighbors": [1, 2, 3, 4, 5, 6, 7, 8, 9]}

[profile_FishersDiscriminant]
model_class = FishersDiscriminant

[profile_NaiveBayesGaussian]
model_class = NaiveBayesGaussian
